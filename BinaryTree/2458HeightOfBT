/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    using pii = pair<int, int>;
    int findHeight(TreeNode* curr, int level, unordered_map<int, pii>& nodesWithTwoheights, unordered_map<int, pii>& nodesWithLevel_height){
            if(curr == nullptr) return 0;
            int maxheight = 1+max(findHeight(curr->left, level+1, nodesWithTwoheights, nodesWithLevel_height), 
                                 findHeight(curr->right, level+1, nodesWithTwoheights, nodesWithLevel_height));

            nodesWithLevel_height[curr->val] = {level, maxheight};

            if(maxheight > nodesWithTwoheights[level].first){
                nodesWithTwoheights[level].second = nodesWithTwoheights[level].first;
                nodesWithTwoheights[level].first = maxheight;
            }
            else if(maxheight > nodesWithTwoheights[level].second){
                nodesWithTwoheights[level].second = maxheight;
            }

        return maxheight;
    }
   
    vector<int> treeQueries(TreeNode* root, vector<int>& queries) {
        vector<int> ans;
        unordered_map<int, pii> nodesWithTwoheights;
        unordered_map<int, pii> nodesWithLevel_height;
        findHeight(root, 0, nodesWithTwoheights, nodesWithLevel_height);

        for(int q : queries){
            int level = nodesWithLevel_height[q].first;
            int height = nodesWithLevel_height[q].second;

            int maxheight = (nodesWithTwoheights[level].first == height) ? nodesWithTwoheights[level].second : nodesWithTwoheights[level].first;
            ans.push_back(maxheight+level-1);
        }
        return ans;
    }
};